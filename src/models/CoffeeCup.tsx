// @ts-nocheck
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/home/models/CoffeeCup.glb --types true --keepnames --keepgroups true --meta true --shadows true --precision 5
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    CoffeeCup: THREE.Mesh
    Coffee: THREE.Mesh
  }
  materials: {
    Cup: THREE.MeshPhysicalMaterial
    Coffee: THREE.MeshPhysicalMaterial
  }
}

type ActionName = 'CoffeeCup' | 'Coffee'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export function Model(props: JSX.IntrinsicElements['group'])
{
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/home/models/CoffeeCup.glb') as unknown as GLTFResult
  const { actions } = useAnimations<GLTFActions>(animations, group)
  console.log(materials);

  return (
    <group animations={actions} ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh name="CoffeeCup" castShadow receiveShadow geometry={nodes.CoffeeCup.geometry} material={materials.Cup} position={[-0.46366, -0.00088, -0.13116]} scale={0.77894} userData={{ name: 'CoffeeCup' }}>
          <mesh name="Coffee" castShadow receiveShadow geometry={nodes.Coffee.geometry} material={materials.Coffee} position={[0, 0.08593, 0]} userData={{ name: 'Coffee' }} />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/home/models/CoffeeCup.glb')
